package space.davids_digital

import org.junit.jupiter.api.*
import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.TestInstance.Lifecycle.PER_CLASS
import org.mockito.Mockito.`when`
import org.mockito.Mockito.mock
import space.davids_digital.TestUtil.Companion.assertBigDouble
import kotlin.Double.Companion.NEGATIVE_INFINITY
import kotlin.Double.Companion.NaN
import kotlin.math.PI

@TestInstance(PER_CLASS)
class ScrapSolverLevel1Test {
    companion object {
        const val NEIGHBORHOOD_DELTA = 0.0000001
        const val MAX_ERROR = 0.000001
        const val PERIOD = 2* PI
    }

    private lateinit var math: ScrapMath
    private lateinit var basicMathMock: BasicMath
    private lateinit var solver: ScrapSolver

    @BeforeAll
    fun initMock() {
        basicMathMock = mock(BasicMath::class.java)
        math = ScrapMathImpl(basicMathMock)
        `when`(basicMathMock.sin(-0.635)).thenReturn(-0.5931775143558129)
        `when`(basicMathMock.sin(-0.635 - PERIOD)).thenReturn(-0.5931775143558129)
        `when`(basicMathMock.sin(-0.635 + PI/2)).thenReturn(0.8050716964734628)
        `when`(basicMathMock.sin(-0.635 + PI/2 - PERIOD)).thenReturn(0.8050716964734628)
        `when`(basicMathMock.sin(-0.8)).thenReturn(-0.7173560908995228)
        `when`(basicMathMock.sin(-0.8 - PERIOD)).thenReturn(-0.7173560908995228)
        `when`(basicMathMock.sin(-0.8 + PI/2)).thenReturn(0.6967067093471654)
        `when`(basicMathMock.sin(-0.8 + PI/2 - PERIOD)).thenReturn(0.6967067093471654)
        `when`(basicMathMock.sin(-1.8627)).thenReturn(-0.9576977799288106)
        `when`(basicMathMock.sin(-1.8627 - PERIOD)).thenReturn(-0.9576977799288106)
        `when`(basicMathMock.sin(-1.8627 + PI/2)).thenReturn(-0.2877758890515806)
        `when`(basicMathMock.sin(-1.8627 + PI/2 - PERIOD)).thenReturn(-0.2877758890515806)
        `when`(basicMathMock.sin(-1.8651)).thenReturn(-0.9570043602898399)
        `when`(basicMathMock.sin(-1.8651 - PERIOD)).thenReturn(-0.9570043602898399)
        `when`(basicMathMock.sin(-1.8651 + PI/2)).thenReturn(-0.29007353272271197)
        `when`(basicMathMock.sin(-1.8651 + PI/2 - PERIOD)).thenReturn(-0.29007353272271197)
        `when`(basicMathMock.sin(-1.8752)).thenReturn(-0.9540258558271397)
        `when`(basicMathMock.sin(-1.8752 - PERIOD)).thenReturn(-0.9540258558271397)
        `when`(basicMathMock.sin(-1.8752 + PI/2)).thenReturn(-0.2997243173539539)
        `when`(basicMathMock.sin(-1.8752 + PI/2 - PERIOD)).thenReturn(-0.2997243173539539)
        `when`(basicMathMock.sin(-2.6)).thenReturn(-0.5155013718214642)
        `when`(basicMathMock.sin(-2.6 - PERIOD)).thenReturn(-0.5155013718214642)
        `when`(basicMathMock.sin(-2.6 + PI/2)).thenReturn(-0.8568887533689473)
        `when`(basicMathMock.sin(-2.6 + PI/2 - PERIOD)).thenReturn(-0.8568887533689473)
        `when`(basicMathMock.sin(-2.6416)).thenReturn(-0.4794190915097759)
        `when`(basicMathMock.sin(-2.6416 - PERIOD)).thenReturn(-0.4794190915097759)
        `when`(basicMathMock.sin(-2.6416 + PI/2)).thenReturn(-0.8775860839233615)
        `when`(basicMathMock.sin(-2.6416 + PI/2 - PERIOD)).thenReturn(-0.8775860839233615)
        `when`(basicMathMock.sin(-2.647)).thenReturn(-0.4746731597745568)
        `when`(basicMathMock.sin(-2.647 - PERIOD)).thenReturn(-0.4746731597745568)
        `when`(basicMathMock.sin(-2.647 + PI/2)).thenReturn(-0.8801621392616465)
        `when`(basicMathMock.sin(-2.647 + PI/2 - PERIOD)).thenReturn(-0.8801621392616465)
        `when`(basicMathMock.sin(-3.707)).thenReturn(0.5357598117150862)
        `when`(basicMathMock.sin(-3.707 - PERIOD)).thenReturn(0.5357598117150862)
        `when`(basicMathMock.sin(-3.707 + PI/2)).thenReturn(-0.8443704306470089)
        `when`(basicMathMock.sin(-3.707 + PI/2 - PERIOD)).thenReturn(-0.8443704306470089)
        `when`(basicMathMock.sin(-3.739)).thenReturn(0.5625007687268155)
        `when`(basicMathMock.sin(-3.739 - PERIOD)).thenReturn(0.5625007687268155)
        `when`(basicMathMock.sin(-3.739 + PI/2)).thenReturn(-0.8267967617145954)
        `when`(basicMathMock.sin(-3.739 - PERIOD + PI/2)).thenReturn(-0.8267967617145954)
        `when`(basicMathMock.sin(-5.142)).thenReturn(0.9091278354700241)
        `when`(basicMathMock.sin(-5.142 - PERIOD)).thenReturn(0.9091278354700241)
        `when`(basicMathMock.sin(-5.142 + PI/2)).thenReturn(0.41651720105367673)
        `when`(basicMathMock.sin(-5.142 + PI/2 - PERIOD)).thenReturn(0.41651720105367673)
        `when`(basicMathMock.sin(-5.147)).thenReturn(0.9070338940679183)
        `when`(basicMathMock.sin(-5.147 - PERIOD)).thenReturn(0.9070338940679183)
        `when`(basicMathMock.sin(-5.147 + PI/2)).thenReturn(0.42105761483672083)
        `when`(basicMathMock.sin(-5.147 + PI/2 - PERIOD)).thenReturn(0.42105761483672083)
        `when`(basicMathMock.sin(-5.165)).thenReturn(0.8993083307387134)
        `when`(basicMathMock.sin(-5.165 - PERIOD)).thenReturn(0.8993083307387134)
        `when`(basicMathMock.sin(-5.165 + PI/2)).thenReturn(0.4373151338153631)
        `when`(basicMathMock.sin(-5.165 - PERIOD + PI/2)).thenReturn(0.4373151338153631)
        `when`(basicMathMock.sin(-5.6)).thenReturn(0.6312666378723216)
        `when`(basicMathMock.sin(-5.6 - PERIOD)).thenReturn(0.6312666378723216)
        `when`(basicMathMock.sin(-5.6 + PI/2)).thenReturn(0.7755658785102496)
        `when`(basicMathMock.sin(-5.6 + PI/2 - PERIOD)).thenReturn(0.7755658785102496)
        `when`(basicMathMock.sin(-5.732)).thenReturn(0.5236973649553304)
        `when`(basicMathMock.sin(-5.732 - PERIOD)).thenReturn(0.5236973649553304)
        `when`(basicMathMock.sin(-5.732 + PI/2)).thenReturn(0.851904378401029)
        `when`(basicMathMock.sin(-5.732 - PERIOD + PI/2)).thenReturn(0.851904378401029)
        `when`(basicMathMock.sin(-5.796)).thenReturn(0.46814053122350874)
        `when`(basicMathMock.sin(-5.796 - PERIOD)).thenReturn(0.46814053122350874)
        `when`(basicMathMock.sin(-5.796 + PI/2)).thenReturn(0.8836540290327267)
        `when`(basicMathMock.sin(-5.796 + PI/2 - PERIOD)).thenReturn(0.8836540290327267)
        `when`(basicMathMock.sin(-5.8)).thenReturn(0.46460217941375737)
        `when`(basicMathMock.sin(-5.8 - PERIOD)).thenReturn(0.46460217941375737)
        `when`(basicMathMock.sin(-5.8 + PI/2)).thenReturn(0.8855195169413189)
        `when`(basicMathMock.sin(-5.8 + PI/2 - PERIOD)).thenReturn(0.8855195169413189)
        `when`(basicMathMock.sin(-5.804)).thenReturn(0.4610563939790461)
        `when`(basicMathMock.sin(-5.804 - PERIOD)).thenReturn(0.4610563939790461)
        `when`(basicMathMock.sin(-5.804 + PI/2)).thenReturn(0.8873708365565316)
        `when`(basicMathMock.sin(-5.804 + PI/2 - PERIOD)).thenReturn(0.8873708365565316)
        `when`(basicMathMock.sin(0.0)).thenReturn(0.0)
        `when`(basicMathMock.sin(0.0 - PERIOD)).thenReturn(0.0)
        `when`(basicMathMock.sin(0.0 + PI/2)).thenReturn(1.0)
        `when`(basicMathMock.sin(0.0 + PI/2 - PERIOD)).thenReturn(1.0)
        `when`(basicMathMock.sin(-PI/2)).thenReturn(-1.0)
        `when`(basicMathMock.sin(-PI/2 - PERIOD)).thenReturn(-1.0)
        `when`(basicMathMock.sin(-PI/2 + PI/2)).thenReturn(0.0)
        `when`(basicMathMock.sin(-PI/2 + PI/2 - PERIOD)).thenReturn(0.0)
        `when`(basicMathMock.sin(-PI)).thenReturn(-1.2246467991473532E-16)
        `when`(basicMathMock.sin(-PI - PERIOD)).thenReturn(-1.2246467991473532E-16)
        `when`(basicMathMock.sin(-PI + PI/2)).thenReturn(-1.0)
        `when`(basicMathMock.sin(-PI + PI/2 - PERIOD)).thenReturn(-1.0)
        `when`(basicMathMock.sin(-PI)).thenReturn(-1.2246467991473532E-16)
        `when`(basicMathMock.sin(-PI - PERIOD)).thenReturn(-1.2246467991473532E-16)
        `when`(basicMathMock.sin(-PI + PI/2)).thenReturn(-1.0)
        `when`(basicMathMock.sin(-PI + PI/2 - PERIOD)).thenReturn(-1.0)
        `when`(basicMathMock.sin(-0.717)).thenReturn(-0.6571262909383763)
        `when`(basicMathMock.sin(-0.717 - PERIOD)).thenReturn(-0.6571262909383763)
        `when`(basicMathMock.sin(-0.717 + PI/2)).thenReturn(0.7537804970663359)
        `when`(basicMathMock.sin(-0.717 + PI/2 - PERIOD)).thenReturn(0.7537804970663359)
        `when`(basicMathMock.sin(-1.867)).thenReturn(-0.9564514935169185)
        `when`(basicMathMock.sin(-1.867 - PERIOD)).thenReturn(-0.9564514935169185)
        `when`(basicMathMock.sin(-1.867 + PI/2)).thenReturn(-0.29189131633067833)
        `when`(basicMathMock.sin(-1.867 + PI/2 - PERIOD)).thenReturn(-0.29189131633067833)
        `when`(basicMathMock.sin(-2.363)).thenReturn(-0.7022782214490862)
        `when`(basicMathMock.sin(-2.363 - PERIOD)).thenReturn(-0.7022782214490862)
        `when`(basicMathMock.sin(-2.363 + PI/2)).thenReturn(-0.711902591425476)
        `when`(basicMathMock.sin(-2.363 + PI/2 - PERIOD)).thenReturn(-0.711902591425476)
        `when`(basicMathMock.sin(-2.637)).thenReturn(-0.4834509010140078)
        `when`(basicMathMock.sin(-2.637 - PERIOD)).thenReturn(-0.4834509010140078)
        `when`(basicMathMock.sin(-2.637 + PI/2)).thenReturn(-0.8753714790354687)
        `when`(basicMathMock.sin(-2.637 + PI/2 - PERIOD)).thenReturn(-0.8753714790354687)
        `when`(basicMathMock.sin(-5.151)).thenReturn(0.9053424118383717)
        `when`(basicMathMock.sin(-5.151 - PERIOD)).thenReturn(0.9053424118383717)
        `when`(basicMathMock.sin(-5.151 + PI/2)).thenReturn(0.4246823722815442)
        `when`(basicMathMock.sin(-5.151 - PERIOD + PI/2)).thenReturn(0.4246823722815442)
        `when`(basicMathMock.sin(-5.507)).thenReturn(0.7005623919951497)
        `when`(basicMathMock.sin(-5.507 - PERIOD)).thenReturn(0.7005623919951497)
        `when`(basicMathMock.sin(-5.507 + PI/2)).thenReturn(0.713591153898389)
        `when`(basicMathMock.sin(-5.507 + PI/2 - PERIOD)).thenReturn(0.713591153898389)
        `when`(basicMathMock.sin(-5.685)).thenReturn(0.5631438138876175)
        `when`(basicMathMock.sin(-5.685 - PERIOD)).thenReturn(0.5631438138876175)
        `when`(basicMathMock.sin(-5.685 + PI/2)).thenReturn(0.8263589080297425)
        `when`(basicMathMock.sin(-5.685 - PERIOD + PI/2)).thenReturn(0.8263589080297425)
        `when`(basicMathMock.sin(-5.797)).thenReturn(0.46725664327150607)
        `when`(basicMathMock.sin(-5.797 - PERIOD)).thenReturn(0.46725664327150607)
        `when`(basicMathMock.sin(-5.797 + PI/2)).thenReturn(0.8841217276589489)
        `when`(basicMathMock.sin(-5.797 + PI/2 - PERIOD)).thenReturn(0.8841217276589489)
        `when`(basicMathMock.sin(-5.801)).thenReturn(0.463716427743332)
        `when`(basicMathMock.sin(-5.801 - PERIOD)).thenReturn(0.463716427743332)
        `when`(basicMathMock.sin(-5.801 + PI/2)).thenReturn(0.8859836762835775)
        `when`(basicMathMock.sin(-5.801 + PI/2 - PERIOD)).thenReturn(0.8859836762835775)
        `when`(basicMathMock.sin(-1.864)).thenReturn(-0.9573228621239073)
        `when`(basicMathMock.sin(-1.864 - PERIOD)).thenReturn(-0.9573228621239073)
        `when`(basicMathMock.sin(-1.864 + PI/2)).thenReturn(-0.2890206526442191)
        `when`(basicMathMock.sin(-1.864 - PERIOD + PI/2)).thenReturn(-0.2890206526442191)
        `when`(basicMathMock.sin(-2.643)).thenReturn(-0.47819000156299973)
        `when`(basicMathMock.sin(-2.643 - PERIOD)).thenReturn(-0.47819000156299973)
        `when`(basicMathMock.sin(-2.643 + PI/2)).thenReturn(-0.878256410397999)
        `when`(basicMathMock.sin(-2.643 - PERIOD + PI/2)).thenReturn(-0.878256410397999)
        `when`(basicMathMock.sin(-3.72)).thenReturn(0.5466910470692872)
        `when`(basicMathMock.sin(-3.72 - PERIOD)).thenReturn(0.5466910470692872)
        `when`(basicMathMock.sin(-3.72 + PI/2)).thenReturn(-0.8373344009738799)
        `when`(basicMathMock.sin(-3.72 + PI/2 - PERIOD)).thenReturn(-0.8373344009738799)
        `when`(basicMathMock.sin(-5.145)).thenReturn(0.9078741946689985)
        `when`(basicMathMock.sin(-5.145 - PERIOD)).thenReturn(0.9078741946689985)
        `when`(basicMathMock.sin(-5.145 + PI/2)).thenReturn(0.4192427061430137)
        `when`(basicMathMock.sin(-5.145 + PI/2 - PERIOD)).thenReturn(0.4192427061430137)
        `when`(basicMathMock.sin(-5.801)).thenReturn(0.463716427743332)
        `when`(basicMathMock.sin(-5.801 - PERIOD)).thenReturn(0.463716427743332)
        `when`(basicMathMock.sin(-5.801 + PI/2)).thenReturn(0.8859836762835775)
        `when`(basicMathMock.sin(-5.801 + PI/2 - PERIOD)).thenReturn(0.8859836762835775)
        `when`(basicMathMock.sin(0.0 - NEIGHBORHOOD_DELTA)).thenReturn(-9.999999999999982E-8)
        `when`(basicMathMock.sin(0.0 - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(-9.999999999999982E-8)
        `when`(basicMathMock.sin(0.0 + NEIGHBORHOOD_DELTA)).thenReturn(9.999999999999982E-8)
        `when`(basicMathMock.sin(0.0 + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(9.999999999999982E-8)
        `when`(basicMathMock.sin(0.0 + PI/2 - NEIGHBORHOOD_DELTA)).thenReturn(0.999999999999995)
        `when`(basicMathMock.sin(0.0 + PI/2 - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(0.999999999999995)
        `when`(basicMathMock.sin(0.0 + PI/2 + NEIGHBORHOOD_DELTA)).thenReturn(0.999999999999995)
        `when`(basicMathMock.sin(0.0 + PI/2 + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(0.999999999999995)
        `when`(basicMathMock.sin(-PI/2 - NEIGHBORHOOD_DELTA)).thenReturn(-0.999999999999995)
        `when`(basicMathMock.sin(-PI/2 - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(-0.999999999999995)
        `when`(basicMathMock.sin(-PI/2 + NEIGHBORHOOD_DELTA)).thenReturn(-0.999999999999995)
        `when`(basicMathMock.sin(-PI/2 + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(-0.999999999999995)
        `when`(basicMathMock.sin(-PI/2 + PI/2 - NEIGHBORHOOD_DELTA)).thenReturn(-9.999999999999982E-8)
        `when`(basicMathMock.sin(-PI/2 + PI/2 - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(-9.999999999999982E-8)
        `when`(basicMathMock.sin(-PI/2 + PI/2 + NEIGHBORHOOD_DELTA)).thenReturn(9.999999999999982E-8)
        `when`(basicMathMock.sin(-PI/2 + PI/2 + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(9.999999999999982E-8)
        `when`(basicMathMock.sin(-PI - NEIGHBORHOOD_DELTA)).thenReturn(9.999999971387727E-8)
        `when`(basicMathMock.sin(-PI - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(9.999999971387727E-8)
        `when`(basicMathMock.sin(-PI + NEIGHBORHOOD_DELTA)).thenReturn(-9.999999995880663E-8)
        `when`(basicMathMock.sin(-PI + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(-9.999999995880663E-8)
        `when`(basicMathMock.sin(-PI + PI/2 - NEIGHBORHOOD_DELTA)).thenReturn(-0.999999999999995)
        `when`(basicMathMock.sin(-PI + PI/2 - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(-0.999999999999995)
        `when`(basicMathMock.sin(-PI + PI/2 + NEIGHBORHOOD_DELTA)).thenReturn(-0.999999999999995)
        `when`(basicMathMock.sin(-PI + PI/2 + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(-0.999999999999995)
        `when`(basicMathMock.sin(-PI - NEIGHBORHOOD_DELTA)).thenReturn(9.999999971387727E-8)
        `when`(basicMathMock.sin(-PI - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(9.999999971387727E-8)
        `when`(basicMathMock.sin(-PI + NEIGHBORHOOD_DELTA)).thenReturn(-9.999999995880663E-8)
        `when`(basicMathMock.sin(-PI + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(-9.999999995880663E-8)
        `when`(basicMathMock.sin(-PI + PI/2 - NEIGHBORHOOD_DELTA)).thenReturn(-0.999999999999995)
        `when`(basicMathMock.sin(-PI + PI/2 - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(-0.999999999999995)
        `when`(basicMathMock.sin(-PI + PI/2 + NEIGHBORHOOD_DELTA)).thenReturn(-0.999999999999995)
        `when`(basicMathMock.sin(-PI + PI/2 + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(-0.999999999999995)
        `when`(basicMathMock.sin(-0.717 - NEIGHBORHOOD_DELTA)).thenReturn(-0.6571263663164226)
        `when`(basicMathMock.sin(-0.717 - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(-0.6571263663164226)
        `when`(basicMathMock.sin(-0.717 + NEIGHBORHOOD_DELTA)).thenReturn(-0.6571262155603234)
        `when`(basicMathMock.sin(-0.717 + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(-0.6571262155603234)
        `when`(basicMathMock.sin(-0.717 + PI/2 - NEIGHBORHOOD_DELTA)).thenReturn(0.7537804313537031)
        `when`(basicMathMock.sin(-0.717 + PI/2 - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(0.7537804313537031)
        `when`(basicMathMock.sin(-0.717 + PI/2 + NEIGHBORHOOD_DELTA)).thenReturn(0.7537805627789612)
        `when`(basicMathMock.sin(-0.717 + PI/2 + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(0.7537805627789612)
        `when`(basicMathMock.sin(-1.867 - NEIGHBORHOOD_DELTA)).thenReturn(-0.956451464327782)
        `when`(basicMathMock.sin(-1.867 - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(-0.956451464327782)
        `when`(basicMathMock.sin(-1.867 + NEIGHBORHOOD_DELTA)).thenReturn(-0.9564515227060453)
        `when`(basicMathMock.sin(-1.867 + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(-0.9564515227060453)
        `when`(basicMathMock.sin(-1.867 + PI/2 - NEIGHBORHOOD_DELTA)).thenReturn(-0.29189141197582624)
        `when`(basicMathMock.sin(-1.867 + PI/2 - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(-0.29189141197582624)
        `when`(basicMathMock.sin(-1.867 + PI/2 + NEIGHBORHOOD_DELTA)).thenReturn(-0.29189122068552753)
        `when`(basicMathMock.sin(-1.867 + PI/2 + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(-0.29189122068552753)
        `when`(basicMathMock.sin(-2.363 - NEIGHBORHOOD_DELTA)).thenReturn(-0.7022781502588237)
        `when`(basicMathMock.sin(-2.363 - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(-0.7022781502588237)
        `when`(basicMathMock.sin(-2.363 + NEIGHBORHOOD_DELTA)).thenReturn(-0.7022782926393417)
        `when`(basicMathMock.sin(-2.363 + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(-0.7022782926393417)
        `when`(basicMathMock.sin(-2.363 + PI/2 - NEIGHBORHOOD_DELTA)).thenReturn(-0.7119026616532945)
        `when`(basicMathMock.sin(-2.363 + PI/2 - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(-0.7119026616532945)
        `when`(basicMathMock.sin(-2.363 + PI/2 + NEIGHBORHOOD_DELTA)).thenReturn(-0.7119025211976503)
        `when`(basicMathMock.sin(-2.363 + PI/2 + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(-0.7119025211976503)
        `when`(basicMathMock.sin(-2.637 - NEIGHBORHOOD_DELTA)).thenReturn(-0.4834508134768576)
        `when`(basicMathMock.sin(-2.637 - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(-0.4834508134768576)
        `when`(basicMathMock.sin(-2.637 + NEIGHBORHOOD_DELTA)).thenReturn(-0.4834509885511531)
        `when`(basicMathMock.sin(-2.637 + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(-0.4834509885511531)
        `when`(basicMathMock.sin(-2.637 + PI/2 - NEIGHBORHOOD_DELTA)).thenReturn(-0.8753715273805545)
        `when`(basicMathMock.sin(-2.637 + PI/2 - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(-0.8753715273805545)
        `when`(basicMathMock.sin(-2.637 + PI/2 + NEIGHBORHOOD_DELTA)).thenReturn(-0.8753714306903743)
        `when`(basicMathMock.sin(-2.637 + PI/2 + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(-0.8753714306903743)
        `when`(basicMathMock.sin(-5.151 - NEIGHBORHOOD_DELTA)).thenReturn(0.9053423693701299)
        `when`(basicMathMock.sin(-5.151 - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(0.9053423693701299)
        `when`(basicMathMock.sin(-5.151 + NEIGHBORHOOD_DELTA)).thenReturn(0.9053424543066045)
        `when`(basicMathMock.sin(-5.151 + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(0.9053424543066045)
        `when`(basicMathMock.sin(-5.151 - NEIGHBORHOOD_DELTA + PI/2)).thenReturn(0.42468246281578315)
        `when`(basicMathMock.sin(-5.151 - NEIGHBORHOOD_DELTA - PERIOD + PI/2)).thenReturn(0.42468246281578315)
        `when`(basicMathMock.sin(-5.151 + NEIGHBORHOOD_DELTA+ PI/2)).thenReturn(0.42468228174730105)
        `when`(basicMathMock.sin(-5.151 + NEIGHBORHOOD_DELTA - PERIOD  + PI/2)).thenReturn(0.42468228174730105)
        `when`(basicMathMock.sin(-5.507 - NEIGHBORHOOD_DELTA)).thenReturn(0.7005623206360305)
        `when`(basicMathMock.sin(-5.507 - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(0.7005623206360305)
        `when`(basicMathMock.sin(-5.507 + NEIGHBORHOOD_DELTA)).thenReturn(0.7005624633542618)
        `when`(basicMathMock.sin(-5.507 + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(0.7005624633542618)
        `when`(basicMathMock.sin(-5.507 - NEIGHBORHOOD_DELTA + PI/2)).thenReturn(0.7135912239546245)
        `when`(basicMathMock.sin(-5.507 + PI/2 - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(0.7135912239546245)
        `when`(basicMathMock.sin(-5.507 + NEIGHBORHOOD_DELTA + PI/2)).thenReturn(0.7135910838421463)
        `when`(basicMathMock.sin(-5.507 + PI/2 + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(0.7135910838421463)
        `when`(basicMathMock.sin(-5.685 - NEIGHBORHOOD_DELTA)).thenReturn(0.5631437312517237)
        `when`(basicMathMock.sin(-5.685 - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(0.5631437312517237)
        `when`(basicMathMock.sin(-5.685 + NEIGHBORHOOD_DELTA)).thenReturn(0.5631438965235057)
        `when`(basicMathMock.sin(-5.685 + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(0.5631438965235057)
        `when`(basicMathMock.sin(-5.685 + PI/2 - NEIGHBORHOOD_DELTA)).thenReturn(0.8263589643441199)
        `when`(basicMathMock.sin(-5.685 + PI/2 - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(0.8263589643441199)
        `when`(basicMathMock.sin(-5.685 + PI/2 + NEIGHBORHOOD_DELTA)).thenReturn(0.8263588517153568)
        `when`(basicMathMock.sin(-5.685 + PI/2 + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(0.8263588517153568)
        `when`(basicMathMock.sin(-5.797 - NEIGHBORHOOD_DELTA)).thenReturn(0.4672565548593307)
        `when`(basicMathMock.sin(-5.797 - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(0.4672565548593307)
        `when`(basicMathMock.sin(-5.797 + NEIGHBORHOOD_DELTA)).thenReturn(0.46725673168367676)
        `when`(basicMathMock.sin(-5.797 + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(0.46725673168367676)
        `when`(basicMathMock.sin(-5.797 + PI/2 - NEIGHBORHOOD_DELTA)).thenReturn(0.8841217743846089)
        `when`(basicMathMock.sin(-5.797 + PI/2 - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(0.8841217743846089)
        `when`(basicMathMock.sin(-5.797 + PI/2 + NEIGHBORHOOD_DELTA)).thenReturn(0.88412168093328)
        `when`(basicMathMock.sin(-5.797 + PI/2 + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(0.88412168093328)
        `when`(basicMathMock.sin(-5.801 - NEIGHBORHOOD_DELTA)).thenReturn(0.4637163391449618)
        `when`(basicMathMock.sin(-5.801 - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(0.4637163391449618)
        `when`(basicMathMock.sin(-5.801 + NEIGHBORHOOD_DELTA)).thenReturn(0.4637165163416975)
        `when`(basicMathMock.sin(-5.801 + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(0.4637165163416975)
        `when`(basicMathMock.sin(-5.801 + PI/2 - NEIGHBORHOOD_DELTA)).thenReturn(0.8859837226552161)
        `when`(basicMathMock.sin(-5.801 + PI/2 - NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(0.8859837226552161)
        `when`(basicMathMock.sin(-5.801 + PI/2 + NEIGHBORHOOD_DELTA)).thenReturn(0.8859836299119302)
        `when`(basicMathMock.sin(-5.801 + PI/2 + NEIGHBORHOOD_DELTA - PERIOD)).thenReturn(0.8859836299119302)
        `when`(basicMathMock.log(0.401)).thenReturn(-0.9137938516755678)
        `when`(basicMathMock.log(0.307)).thenReturn(-1.18090753139494)
        `when`(basicMathMock.log(1.0)).thenReturn(0.0)
        `when`(basicMathMock.log(0.28)).thenReturn(-1.2729656758128873)
        `when`(basicMathMock.log(0.327)).thenReturn(-1.1177951080848836)
        `when`(basicMathMock.log(0.6)).thenReturn(-0.5108256237659907)
        `when`(basicMathMock.log(1.6)).thenReturn(0.47000362924573563)
        `when`(basicMathMock.log(NEIGHBORHOOD_DELTA)).thenReturn(-16.11809565095832)
        `when`(basicMathMock.log(2.0)).thenReturn(0.6931471805599453)
        `when`(basicMathMock.log(3.0)).thenReturn(1.0986122886681098)
        `when`(basicMathMock.log(5.0)).thenReturn(1.6094379124341003)
        `when`(basicMathMock.log(10.0)).thenReturn(2.302585092994046)
        `when`(basicMathMock.log(0.401 - NEIGHBORHOOD_DELTA)).thenReturn(-0.9137941010521575)
        `when`(basicMathMock.log(0.401 + NEIGHBORHOOD_DELTA)).thenReturn(-0.9137936022990403)
        `when`(basicMathMock.log(0.307 - NEIGHBORHOOD_DELTA)).thenReturn(-1.180907857127892)
        `when`(basicMathMock.log(0.307 + NEIGHBORHOOD_DELTA)).thenReturn(-1.180907205662094)
        `when`(basicMathMock.log(1.0 - NEIGHBORHOOD_DELTA)).thenReturn(-1.0000000494736474E-7)
        `when`(basicMathMock.log(1.0 + NEIGHBORHOOD_DELTA)).thenReturn(9.999999505838704E-8)
        solver = ScrapSolver(math)
    }

    @Test
    fun `at asymptotes`() {
        // periodic
        assertEquals(NaN, solver.solve(0.0))
        assertEquals(NaN, solver.solve(-0.5 * PI))
        assertEquals(NaN, solver.solve(PI))
        assertEquals(NaN, solver.solve(-3 / 2 * PI))
        assertEquals(NaN, solver.solve(0.0 - PERIOD))
        assertEquals(NaN, solver.solve(-0.5 * PI - PERIOD))
        assertEquals(NaN, solver.solve(PI - PERIOD))
        assertEquals(NaN, solver.solve(-3 / 2 * PI - PERIOD))
    }

    @Test
    fun `near asymptotes`() {
        assertBigDouble(2.3799959934542757E7,   solver.solve(0.0     + NEIGHBORHOOD_DELTA))
        assertEquals(NaN,                       solver.solve(-0.5*PI + NEIGHBORHOOD_DELTA))
        assertEquals(NaN,                       solver.solve(-PI     + NEIGHBORHOOD_DELTA))
        assertEquals(NaN,                       solver.solve(-3/2*PI + NEIGHBORHOOD_DELTA))
        assertEquals(NaN,                       solver.solve(0.0     - NEIGHBORHOOD_DELTA))
        assertEquals(NaN,                       solver.solve(-0.5*PI - NEIGHBORHOOD_DELTA))
        assertEquals(NaN,         solver.solve(-PI     - NEIGHBORHOOD_DELTA))
        assertEquals(NaN,         solver.solve(-3/2*PI - NEIGHBORHOOD_DELTA))
        assertEquals(NEGATIVE_INFINITY,         solver.solve(0.0     + NEIGHBORHOOD_DELTA - PERIOD))
        assertEquals(NaN,                       solver.solve(-0.5*PI + NEIGHBORHOOD_DELTA - PERIOD))
        assertEquals(NaN,                       solver.solve(-PI     + NEIGHBORHOOD_DELTA - PERIOD))
        assertEquals(NaN,                       solver.solve(-3/2*PI + NEIGHBORHOOD_DELTA - PERIOD))
        assertEquals(NaN,                       solver.solve(0.0     - NEIGHBORHOOD_DELTA - PERIOD))
        assertEquals(NaN,                       solver.solve(-0.5*PI - NEIGHBORHOOD_DELTA - PERIOD))
        assertEquals(NaN,         solver.solve(-PI     - NEIGHBORHOOD_DELTA - PERIOD))
        assertEquals(NaN,         solver.solve(-3/2*PI - NEIGHBORHOOD_DELTA - PERIOD))
    }

    @Test
    fun `at extremes`() {
        // periodic
        assertBigDouble(3.0529194659361445E13, solver.solve(-0.717))
        assertBigDouble(-1.4583709921831516E29, solver.solve(-1.867))
        assertBigDouble(-2.746324158962901E15, solver.solve(-2.363))
        assertBigDouble(-3.0359052276369726E20, solver.solve(-2.637))
        assertBigDouble(4.78789039114917E12, solver.solve(-5.151))
        assertBigDouble(2.2814173515074825E9, solver.solve(-5.507))
        assertBigDouble(6.656125193022193E9, solver.solve(-5.685))
        assertBigDouble(-13.759135310773415, solver.solve(-5.797))
        assertBigDouble(-12.413011870459437, solver.solve(-5.801))
        assertBigDouble(3.0529194659361445E13, solver.solve(-0.717 - PERIOD))
        assertBigDouble(-1.4583709921831516E29, solver.solve(-1.867 - PERIOD))
        assertBigDouble(-2.746324158962901E15, solver.solve(-2.363 - PERIOD))
        assertBigDouble(-3.0359052276369726E20, solver.solve(-2.637 - PERIOD))
        assertBigDouble(4.78789039114917E12, solver.solve(-5.151 - PERIOD))
        assertBigDouble(2.2814173515074825E9, solver.solve(-5.507 - PERIOD))
        assertBigDouble(6.656125193022193E9, solver.solve(-5.685 - PERIOD))
        assertBigDouble(-13.759135310773415, solver.solve(-5.797 - PERIOD))
        assertBigDouble(-12.413011870459437, solver.solve(-5.801 - PERIOD))
        // simple
        assertBigDouble(-0.5583200340259737, solver.solve(0.401))
    }

    @Test
    fun `near extremes`() {
        // periodic
        assertBigDouble(3.0529194940501188E13, solver.solve(-0.717 + NEIGHBORHOOD_DELTA))
        assertBigDouble(-1.4583702097775451E29, solver.solve(-1.867 + NEIGHBORHOOD_DELTA))
        assertBigDouble(-2.746324168437796E15, solver.solve(-2.363 + NEIGHBORHOOD_DELTA))
        assertBigDouble(-3.035903697616726E20, solver.solve(-2.637 + NEIGHBORHOOD_DELTA))
        assertBigDouble(4.787886328910792E12, solver.solve(-5.151 + NEIGHBORHOOD_DELTA))
        assertBigDouble(2.28141735883667E9, solver.solve(-5.507 + NEIGHBORHOOD_DELTA))
        assertBigDouble(6.656125083006235E9, solver.solve(-5.685 + NEIGHBORHOOD_DELTA))
        assertBigDouble(-13.75909462183887, solver.solve(-5.797 + NEIGHBORHOOD_DELTA))
        assertBigDouble(-12.413073588291374, solver.solve(-5.801 + NEIGHBORHOOD_DELTA))
        assertBigDouble(3.052919437852788E13, solver.solve(-0.717 - NEIGHBORHOOD_DELTA))
        assertBigDouble(-1.4583717729649684E29, solver.solve(-1.867 - NEIGHBORHOOD_DELTA))
        assertBigDouble(-2.746324149495239E15, solver.solve(-2.363 - NEIGHBORHOOD_DELTA))
        assertBigDouble(-3.0359067568669655E20, solver.solve(-2.637 - NEIGHBORHOOD_DELTA))
        assertBigDouble(4.78789445238783E12, solver.solve(-5.151 - NEIGHBORHOOD_DELTA))
        assertBigDouble(2.28141734418101E9, solver.solve(-5.507 - NEIGHBORHOOD_DELTA))
        assertBigDouble(6.656125303013066E9, solver.solve(-5.685 - NEIGHBORHOOD_DELTA))
        assertBigDouble(-13.759175981059713, solver.solve(-5.797 - NEIGHBORHOOD_DELTA))
        assertBigDouble(-12.412950158090965, solver.solve(-5.801 - NEIGHBORHOOD_DELTA))
        assertBigDouble(3.0529194940501188E13, solver.solve(-0.717 + NEIGHBORHOOD_DELTA - PERIOD))
        assertBigDouble(-1.4583702097775451E29, solver.solve(-1.867 + NEIGHBORHOOD_DELTA - PERIOD))
        assertBigDouble(-2.746324168437796E15, solver.solve(-2.363 + NEIGHBORHOOD_DELTA - PERIOD))
        assertBigDouble(-3.035903697616726E20, solver.solve(-2.637 + NEIGHBORHOOD_DELTA - PERIOD))
        assertBigDouble(4.787886328910792E12, solver.solve(-5.151 + NEIGHBORHOOD_DELTA - PERIOD))
        assertBigDouble(2.28141735883667E9, solver.solve(-5.507 + NEIGHBORHOOD_DELTA - PERIOD))
        assertBigDouble(6.656125083006235E9, solver.solve(-5.685 + NEIGHBORHOOD_DELTA - PERIOD))
        assertBigDouble(-13.75909462183887, solver.solve(-5.797 + NEIGHBORHOOD_DELTA - PERIOD))
        assertBigDouble(-12.413073588291374, solver.solve(-5.801 + NEIGHBORHOOD_DELTA - PERIOD))
        assertBigDouble(3.052919437852788E13, solver.solve(-0.717 - NEIGHBORHOOD_DELTA - PERIOD))
        assertBigDouble(-1.4583717729649684E29, solver.solve(-1.867 - NEIGHBORHOOD_DELTA - PERIOD))
        assertBigDouble(-2.746324149495239E15, solver.solve(-2.363 - NEIGHBORHOOD_DELTA - PERIOD))
        assertBigDouble(-3.0359067568669655E20, solver.solve(-2.637 - NEIGHBORHOOD_DELTA - PERIOD))
        assertBigDouble(4.78789445238783E12, solver.solve(-5.151 - NEIGHBORHOOD_DELTA - PERIOD))
        assertBigDouble(2.28141734418101E9, solver.solve(-5.507 - NEIGHBORHOOD_DELTA - PERIOD))
        assertBigDouble(6.656125303013066E9, solver.solve(-5.685 - NEIGHBORHOOD_DELTA - PERIOD))
        assertBigDouble(-13.759175981059713, solver.solve(-5.797 - NEIGHBORHOOD_DELTA - PERIOD))
        assertBigDouble(-12.412950158090965, solver.solve(-5.801 - NEIGHBORHOOD_DELTA - PERIOD))
        // simple
        assertBigDouble(-0.5583200331288632, solver.solve(0.401 + NEIGHBORHOOD_DELTA))
        assertBigDouble(-0.5583200349225645, solver.solve(0.401 - NEIGHBORHOOD_DELTA))
    }

    @Test
    fun `x = 1 is a break`() {
        assertEquals(NaN, solver.solve(1.0))
        assertEquals(-5.324558406046574E-8, solver.solve(1.0 - NEIGHBORHOOD_DELTA), MAX_ERROR)
        assertEquals(5.324557879502206E-8, solver.solve(1.0 + NEIGHBORHOOD_DELTA), MAX_ERROR)
    }

    @Test
    fun `near zeroes`() {
        // periodic
        assertBigDouble(4.985870152126281E28, solver.solve(-1.864))
        assertBigDouble(3.253047027618872E19, solver.solve(-2.643))
        assertBigDouble(-0.07894168592285791, solver.solve(-3.720))
        assertBigDouble(-3.3995186922729065E11, solver.solve(-5.145))
        assertBigDouble(-12.413011870459437, solver.solve(-5.801))
        assertBigDouble(4.985870152126281E28, solver.solve(-1.864 - PERIOD))
        assertBigDouble(3.253047027618872E19, solver.solve(-2.643 - PERIOD))
        assertBigDouble(-0.07894168592285791, solver.solve(-3.720 - PERIOD))
        assertBigDouble(-3.3995186922729065E11, solver.solve(-5.145 - PERIOD))
        assertBigDouble(-12.413011870459437, solver.solve(-5.801 - PERIOD))
        // simple
        assertEquals(-2.0266179553385388E-4, solver.solve(0.307), MAX_ERROR)
    }

    @Test
    fun `at simple points`() {
        // periodic
        assertBigDouble(9.467551013160646E14, solver.solve(-0.6350))
        assertBigDouble(8.396770159403462E14, solver.solve(-0.8000))
        assertBigDouble(5.087520383882573E29, solver.solve(-1.8627))
        assertBigDouble(-9.150634717349539E28, solver.solve(-1.8651))
        assertBigDouble(-5.505931951772536E28, solver.solve(-1.8752))
        assertBigDouble(-1.7364655471205607E19, solver.solve(-2.6000))
        assertBigDouble(-1.47847555394059E20, solver.solve(-2.6416))
        assertBigDouble(1.5690707198568324E21, solver.solve(-2.6470))
        assertBigDouble(-5244.307172916271, solver.solve(-3.7070))
        assertBigDouble(1.6823234512148297, solver.solve(-3.7390))
        assertBigDouble(-1.5965177547612164E13, solver.solve(-5.1420))
        assertBigDouble(3.121697415663028E12, solver.solve(-5.1470))
        assertBigDouble(2.977147179959764E12, solver.solve(-5.1650))
        assertBigDouble(3.590227679157593E9, solver.solve(-5.6000))
        assertBigDouble(3.2796271139795513E9, solver.solve(-5.7320))
        assertBigDouble(-10.617902944663737, solver.solve(-5.7960))
        assertBigDouble(-13.040691498785424, solver.solve(-5.8000))
        assertBigDouble(-355.242762584736, solver.solve(-5.8040))
        assertBigDouble(9.467551013160646E14, solver.solve(-0.6350 - PERIOD))
        assertBigDouble(8.396770159403462E14, solver.solve(-0.8000 - PERIOD))
        assertBigDouble(5.087520383882573E29, solver.solve(-1.8627 - PERIOD))
        assertBigDouble(-9.150634717349539E28, solver.solve(-1.8651 - PERIOD))
        assertBigDouble(-5.505931951772536E28, solver.solve(-1.8752 - PERIOD))
        assertBigDouble(-1.7364655471205607E19, solver.solve(-2.6000 - PERIOD))
        assertBigDouble(-1.47847555394059E20, solver.solve(-2.6416 - PERIOD))
        assertBigDouble(1.5690707198568324E21, solver.solve(-2.6470 - PERIOD))
        assertBigDouble(-5244.307172916271, solver.solve(-3.7070 - PERIOD))
        assertBigDouble(1.6823234512148297, solver.solve(-3.7390 - PERIOD))
        assertBigDouble(-1.5965177547612164E13, solver.solve(-5.1420 - PERIOD))
        assertBigDouble(3.121697415663028E12, solver.solve(-5.1470 - PERIOD))
        assertBigDouble(2.977147179959764E12, solver.solve(-5.1650 - PERIOD))
        assertBigDouble(3.590227679157593E9, solver.solve(-5.6000 - PERIOD))
        assertBigDouble(3.2796271139795513E9, solver.solve(-5.7320 - PERIOD))
        assertBigDouble(-10.617902944663737, solver.solve(-5.7960 - PERIOD))
        assertBigDouble(-13.040691498785424, solver.solve(-5.8000 - PERIOD))
        assertBigDouble(-355.242762584736, solver.solve(-5.8040 - PERIOD))
        // simple
        assertBigDouble(0.6821391206694338, solver.solve(0.280))
        assertBigDouble(-0.27684034797093265, solver.solve(0.327))
        assertBigDouble(-0.29618223644836766, solver.solve(0.600))
        assertBigDouble(0.2987434317911068, solver.solve(1.600))
    }
}